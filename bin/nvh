#!/usr/bin/env bash
# shellcheck disable=SC1117,SC2155
# https://github.com/koalaman/shellcheck/wiki

#
# Setup.
#

readonly VERSION="6.0.5-0"
readonly TAB_CHAR=$'\t'

NVH_PREFIX=${NVH_PREFIX:-/usr/local}
NVH_PREFIX=${NVH_PREFIX%/}
readonly CACHE_DIR=$NVH_PREFIX/nvh/versions

NODE_MIRROR=${NVH_NODE_MIRROR:-https://nodejs.org/dist}
NODE_MIRROR=${NODE_MIRROR%/}
readonly NODE_MIRROR

NODE_DOWNLOAD_MIRROR=${NVH_NODE_DOWNLOAD_MIRROR:-https://nodejs.org/download}
NODE_DOWNLOAD_MIRROR=${NODE_DOWNLOAD_MIRROR%/}
readonly NODE_DOWNLOAD_MIRROR

# Modified by command options, but otherwise constant
g_showing_get_progress="false"
PRESERVE_NPM="false"

g_ls_remote_max_matches=${NVH_MAX_REMOTE_MATCHES:-20}

g_download_mirror_url=${NODE_MIRROR}
g_download_folder_name="node"

# Starting options. May get added to from environment variables et al.
# Defining commands in variables is fraught (http://mywiki.wooledge.org/BashFAQ/050)
# but we can follow the simple case and store arguments in an array.

# --location to follow redirects
# --fail to avoid happily downloading error page from web server for 404 et al
# --show-error to show why failed (on stderr)
g_curl_options=( "--location" "--fail" "--show-error" )
if [[ -t 1 ]]; then
  g_curl_options+=( "--progress-bar" )
  command -v curl &> /dev/null && g_showing_get_progress="true"
else
  g_curl_options+=( "--silent" )
fi
g_wget_options=( "-q" "-O-" )

# Set by set_active_node
g_active_node=

# ANSI escape codes
# https://en.wikipedia.org/wiki/ANSI_escape_code
# http://no-color.org
# https://bixense.com/clicolors

g_use_color="true"
if [[ -n "${CLICOLOR_FORCE+defined}" && "${CLICOLOR_FORCE}" != "0" ]]; then
  g_use_color="true"
elif [[ -n "${NO_COLOR+defined}" || "${CLICOLOR}" = "0" || ! -t 1 ]]; then
  g_use_color="false"
fi
# Select Graphic Rendition codes
if [[ "${g_use_color}" = "true" ]]; then
  # KISS and use codes rather than tput, avoid dealing with missing tput or TERM.
  readonly SGR_RESET="\033[0m"
  readonly SGR_FAINT="\033[2m"
  readonly SGR_RED="\033[31m"
  readonly SGR_CYAN="\033[36m"
else
  readonly SGR_RESET=
  readonly SGR_FAINT=
  readonly SGR_RED=
  readonly SGR_CYAN=
fi

#
# do_get <args...>
# Call curl or wget with combination of global and passed arguments.
#

function do_get() {
  if command -v curl &> /dev/null; then
    curl "${g_curl_options[@]}" "$@"
  elif command -v wget &> /dev/null; then
    wget "${g_wget_options[@]}" "$@"
  else
    abort "curl or wget command required"
  fi
}

function do_get_index() {
  if command -v curl &> /dev/null; then
    # --silent to suppress progress et al
    curl --silent "${g_curl_options[@]}" "$@"
  elif command -v wget &> /dev/null; then
    wget "${g_wget_options[@]}" "$@"
  else
    abort "curl or wget command required"
  fi
}

function set_insecure() {
  g_curl_options+=( "--insecure" )
  g_wget_options+=( "--no-check-certificate" )
}

#
# update_download_settings_from_version <version>
# e.g. <nightly/latest> means using download mirror and folder is nightly
#

function update_download_settings_from_version() {
  if is_download_folder "$1" ; then
    g_download_folder_name="$1"
    g_download_mirror_url="${NODE_DOWNLOAD_MIRROR}/${g_download_folder_name}"
  elif is_download_folder "$1" || is_download_version "$1"; then
    [[ "$1" =~ ^([^/]+)/(.*) ]]
    local remote_folder="${BASH_REMATCH[1]}"
    g_download_folder_name="${remote_folder}"
    g_download_mirror_url="${NODE_DOWNLOAD_MIRROR}/${g_download_folder_name}"
  fi
}

#
# install_log <action> <msg>
#

function install_log() {
  printf "  ${SGR_CYAN}%10s${SGR_RESET} : ${SGR_FAINT}%s${SGR_RESET}\n" "$1" "$2"
}

#
# abort <messages...>
# Exit with the given messge
#

function abort() {
  >&2 printf "\n  ${SGR_RED}Error: %s${SGR_RESET}\n\n" "$*" && exit 1
}

#
# More assorted logging functions
#

function trace() {
  >&2 printf "trace: %s\n" "$*"
}

function warn() {
  printf "${SGR_RED}%s${SGR_RESET}\n" "$*"
}

#
# Version test patterns
#

function is_lts_codename() {
  # https://github.com/nodejs/Release/blob/master/CODENAMES.md
  # e.g. argon, Boron
  [[ "$1" =~ ^([Aa]rgon|[Bb]oron|[Cc]arbon|[Dd]ubnium|[Ee]rbium|[Ff]ermium|[Gg]allium|[Hh]ydrogen|[Ii]ron)$ ]]
}

function is_download_folder() {
  # e.g. nightly
  [[ "$1" =~ ^(chakracore-nightly|chakracore-rc|chakracore-release|next-nightly|nightly|rc|release|test|v8-canary)$ ]]
}

function is_download_version() {
  # e.g. nightly/, nightly/latest, nightly/v11
  if [[ "$1" =~ ^([^/]+)/(.*) ]]; then
    local remote_folder="${BASH_REMATCH[1]}"
    is_download_folder "${remote_folder}"
    return
  fi
  return 2
}

function is_numeric_version() {
  # e.g. 6, v7.1, 8.11.3
  [[ "$1" =~ ^[v]{0,1}[0-9]+(\.[0-9]+){0,2}$ ]]
}

function is_exact_numeric_version() {
  # e.g. 6, v7.1, 8.11.3
  [[ "$1" =~ ^[v]{0,1}[0-9]+\.[0-9]+\.[0-9]+$ ]]
}

#
# Functions used when showing versions installed
#

function enter_fullscreen() {
  # Set cursor to be invisible
  tput civis 2> /dev/null
  # Save screen contents
  tput smcup 2> /dev/null
  stty -echo
}

function leave_fullscreen() {
  # Set cursor to normal
  tput cnorm 2> /dev/null
  # Restore screen contentsq
  tput rmcup 2> /dev/null
  stty echo
}

function handle_sigint() {
  leave_fullscreen
  S="$?"
  kill 0
  exit $S
}

function handle_sigtstp() {
  leave_fullscreen
  kill -s SIGSTOP $$
}

#
# Output usage information.
#

function display_help() {
  cat <<-EOF
Usage: nvh [options] [COMMAND] [args]

Commands:

  nvh                             Display downloaded node versions and install selection
  nvh install <version>           Install node <version> (downloading if necessary)
  nvh uninstall                   Remove the installed node and npm
  nvh ls                          Output downloaded versions
  nvh ls-remote [version]         Output matching versions available for download
  nvh run <version> [args ...]    Execute downloaded node <version> with [args ...]
  nvh which <version>             Output path for downloaded node <version>
  nvh cache clear                 Remove all downloaded versions
  nvh cache prune                 Remove all downloaded versions except the installed version
  nvh rm <version ...>            Remove the given downloaded version(s)
  nvh doctor                      Output diagnostics to help solve issues
  nvh help                        Display help information

Options:

  --all               ls-remote displays all matches instead of last 20
  -h, --help          Display help information
  --insecure          Turn off certificate checking for https requests (may be needed from behind a proxy server)
  -p, --preserve      Preserve npm and npx during install of node
  -V, --version       Output version of nvh

Aliases:

  i: install
  current: latest (version)
  list: ls
  lsr, list-remote: ls-remote
  remove: rm

Versions:

  Numeric version numbers can be complete or incomplete, with an optional leading 'v'.
  Versions can also be specified by label, or codename,
  and other downloadable releases by <remote-folder>/<version>

    4.9.1, 8, v6.1    Numeric versions
    lts               Newest Long Term Support official release
    latest, current   Newest official release
    boron, carbon     Codenames for release streams
    and nightly, chakracore-release/latest, rc/10 et al

Examples:

  nvh install latest  Install the newest node release
  nvh lsr lts         Output newest LTS version
  nvh i -p lts        Install newest LTS release, preserving installed npm and npx
  nvh                 Display downloaded node versions and install selection

See also https://github.com/JohnRGee/nvh.git for further information.
EOF
}

function err_no_installed_print_help() {
  display_help
  abort "no downloaded versions yet, see above help for commands"
}

#
# Output version after selected.
#

function next_version_installed() {
  list_cache_versions | grep "${selected}" -A 1 | tail -n 1
}

#
# Output version before selected.
#

function prev_version_installed() {
  list_cache_versions | grep "${selected}" -B 1 | head -n 1
}

#
# Output nvh version.
#

function display_nvh_version() {
  echo "${VERSION}"
}

#
# Check for active version and return as $g_active_node
#

function set_active_node() {
  g_active_node=
  local node_path="$(command -v node)"
  if [[ -x "${node_path}" ]]; then
    local installed_version=$(node --version)
    for dir in "${CACHE_DIR}"/*/ ; do
      local folder_name="${dir%/}"
      folder_name="${folder_name##*/}"
      if diff &> /dev/null \
        "${CACHE_DIR}/${folder_name}/${installed_version}/bin/node" \
        "${node_path}" ; then
        g_active_node="${folder_name}/${installed_version}"
        break
      fi
    done
  fi
}

#
# Display sorted versions directories paths.
#

function versions_paths() {
  # e.g. node/v8.11.3
  # sort string . number . number . number

  find "${CACHE_DIR}" -maxdepth 2 -type d \
    | sed 's|'"${CACHE_DIR}"'/||g' \
    | grep -E "/v[0-9]+\.[0-9]+\.[0-9]+" \
    | sed 's|/v|.|' \
    | sort -k 1,1 -k 2,2n -k 3,3n -k 4,4n -t . \
    | sed 's|\.|/v|'
}

#
# Display installed versions with <selected>
#

function display_versions_with_selected() {
  selected="$1"
  echo
  for folder_and_version in $(versions_paths); do
    if [[ "${folder_and_version}" = "${selected}" ]]; then
      printf "  ${SGR_CYAN}Î¿${SGR_RESET} %s\n" "${folder_and_version}"
    else
      printf "    ${SGR_FAINT}%s${SGR_RESET}\n" "${folder_and_version}"
    fi
  done
  echo
  printf "Use up/down arrow keys to select a version, return key to install, q to quit"
}

#
# List cache versions.
#

function list_cache_versions() {
  for folder_and_version in $(versions_paths); do
    echo "${folder_and_version}"
  done
}

#
# Display downloaded versions in cache. and mark the installed version.
#

function display_cache_versions() {
  enter_fullscreen
  set_active_node

  clear
  display_versions_with_selected "${g_active_node}"

  trap handle_sigint INT
  trap handle_sigtstp SIGTSTP

  ESCAPE_SEQ=$'\033'
  UP=$'A'
  DOWN=$'B'

  while true; do
    read -rsn 1 key
    case "$key" in
      $ESCAPE_SEQ)
        # Handle ESC sequences followed by other characters, i.e. arrow keys
        read -rsn 1 -t 1 tmp
        if  [[ "$tmp" = "[" ]]; then
          read -rsn 1 -t 1 arrow
          case "$arrow" in
            $UP)
              clear
              display_versions_with_selected "$(prev_version_installed)"
              ;;
            $DOWN)
              clear
              display_versions_with_selected "$(next_version_installed)"
              ;;
          esac
        fi
        ;;
      "k")
        clear
        display_versions_with_selected "$(prev_version_installed)"
        ;;
      "j")
        clear
        display_versions_with_selected "$(next_version_installed)"
        ;;
      "q")
        clear
        leave_fullscreen
        exit
        ;;
      "")
        # enter key returns empty string
        leave_fullscreen
        activate "${selected}"
        exit
        ;;
    esac
  done
}

#
# Move up a line and erase.
#

function erase_line() {
  printf "\033[1A\033[2K"
}

#
# Check the HEAD response of <url>.
#

function is_ok() {
  # Note: both curl and wget can follow redirects, as present on some mirrors (e.g. https://npm.taobao.org/mirrors/node).
  # The output is complicated with redirects, so keep it simple and use command status rather than parse output.
  if command -v curl &> /dev/null; then
    do_get --silent --head "$1" > /dev/null || return 1
  else
    do_get --spider "$1" &> /dev/null || return 1
  fi
}

#
# display_tarball_platform <version>
#

function display_tarball_platform() {
  local version="${1#v}"
  local uname="$(uname -a)"
  local arch=x86
  local os=

  case "$uname" in
    Linux*) os=linux ;;
    Darwin*) os=darwin ;;
    SunOS*) os=sunos ;;
  esac

  case "$uname" in
    *x86_64*) arch=x64 ;;
    *armv6l*) arch=armv6l ;;
    *armv7l*) arch=armv7l ;;
    *arm64*) arch=arm64 ;;
    *aarch64*) arch=arm64 ;;
  esac

  if [[ "${arch}" = "armv6l" ]]; then
    local semver=${version//./ }
    local major=$(echo "${semver}" | grep -o -E '[0-9]+' | head -1 | sed -e 's/^0\+//')
    local minor=$(echo "${semver}" | awk '{print $2}' | grep -o -E '[0-9]+' | head -1 | sed -e 's/^0\+//')
    [[ $major -eq "" && $minor -lt 12 ]] && arch=arm-pi
  fi

  echo "${os}-${arch}"
}

#
# display <file> for current platform, as per <file> field in index.tab, which is different than actual download
# display_compatible_file_field <version>
#

function display_compatible_file_field {
  local version="$1"

  local compatible_file_field="$(display_tarball_platform $"{version}")"
  if [[ "${compatible_file_field}" =~ darwin-(.*) ]]; then
    compatible_file_field="osx-${BASH_REMATCH[1]}-tar"
  fi
  echo "${compatible_file_field}"
}

#
# tarball_url <version>
#

function tarball_url() {
  local version="$1"
  echo "${g_download_mirror_url}/${version}/node-${version}-$(display_tarball_platform "${version}").tar.gz"
}

#
# Disable PaX mprotect for <binary>
#

function disable_pax_mprotect() {
  [[ -z "$1" ]] && abort "binary required"
  local binary=$1

  # try to disable mprotect via XATTR_PAX header
  local PAXCTL=$(PATH="/sbin:/usr/sbin:$PATH" command -v paxctl-ng 2>&1)
  local PAXCTL_ERROR=1
  if [[ -x "$PAXCTL" ]]; then
    $PAXCTL -l && $PAXCTL -m "$binary" >/dev/null 2>&1
    PAXCTL_ERROR="$?"
  fi

  # try to disable mprotect via PT_PAX header
  if [[ $PAXCTL_ERROR != 0 ]]; then
    PAXCTL=$(PATH="/sbin:/usr/sbin:$PATH" command -v paxctl 2>&1)
    if [[ -x "$PAXCTL" ]]; then
      $PAXCTL -Cm "$binary" >/dev/null 2>&1
    fi
  fi
}

#
# activate <path_from_prefix>
# e.g. activate node/8.11.3, activate nightly/11.0.0-nightly201807118174d0c8ca
#

function activate() {
  local path_from_prefix=$1
  local dir="${CACHE_DIR}/${path_from_prefix}"
  # Remove old npm to avoid potential issues with simple overwrite.
  if [[ "${PRESERVE_NPM}" = "false" && -d "${dir}/lib/node_modules/npm" ]]; then
    if [[ -d "${NVH_PREFIX}/lib/node_modules/npm" ]]; then
      rm -rf "${NVH_PREFIX}/lib/node_modules/npm"
    fi
  fi
  # Copy (lib before bin to avoid error messages on Darwin when cp over dangling link)
  for subdir in lib bin include share; do
    if [[ "${PRESERVE_NPM}" = "true" ]]; then
      rsync --recursive --archive --keep-dirlinks --exclude=npm --exclude=npx "${dir}/${subdir}" "${NVH_PREFIX}"
    else
      rsync --recursive --archive --keep-dirlinks "${dir}/${subdir}" "${NVH_PREFIX}"
    fi
  done
  local installed_node="${NVH_PREFIX}/bin/node"
  disable_pax_mprotect "${installed_node}"

  local active_node="$(command -v node)"
  if [[ -e "${active_node}" && -e "${installed_node}" && "${active_node}" != "${installed_node}" ]]; then
    install_log "installed" "$("${installed_node}" --version) to ${installed_node}"
    install_log "active" "$("${active_node}" --version) at ${active_node}"
  else
    install_log "installed" "$("${installed_node}" --version)"
  fi
}

#
# Install <version>
#

function install() {
  [[ -z "$1" ]] && abort "version required"
  local resolved_version
  resolved_version="$(display_latest_resolved_version "$1")" || return 2
  [[ -n "${resolved_version}" ]] || abort "no version found for '$1'"
  update_download_settings_from_version "$1"

  local dir="${CACHE_DIR}/${g_download_folder_name}/${resolved_version}"

  if [[ -d "${dir}" ]]; then
    if [[ ! -e "${dir}/nvh.lock" ]] ; then
      activate "${g_download_folder_name}/${resolved_version}"
      exit
    fi
  fi

  echo
  install_log "installing" "${g_download_folder_name}/${resolved_version}"

  local url="$(tarball_url "${resolved_version}")"
  is_ok "${url}" || abort "download preflight failed for '$resolved_version' (${url})"

  install_log "mkdir" "${dir}"
  mkdir -p "${dir}" || abort "sudo required (or change ownership, or define NVH_PREFIX)"
  touch "${dir}/nvh.lock"

  # shellcheck disable=SC2164
  cd "${dir}"

  install_log "fetch" "${url}"
  do_get "${url}" | tar -zx --strip-components=1
  [[ "${g_showing_get_progress}" = "true" ]] && erase_line
  rm -f "${dir}/nvh.lock"

  disable_pax_mprotect bin/node

  activate "${g_download_folder_name}/${resolved_version}"
  echo
}

#
# Set preserve for npm and npx.
#

function set_preserve_npm() {
  PRESERVE_NPM="true"
}

#
# set_show_all_remote_matches
#

function set_show_all_remote_matches() {
  g_ls_remote_max_matches=32000
}

function set_show_single_remote_match() {
  g_ls_remote_max_matches=1
}

#
# Remove <version ...>
#

function remove_versions() {
  [[ -z "$1" ]] && abort "version(s) required"
  while [[ $# -ne 0 ]]; do
    local version
    version="$(display_latest_resolved_version "$1")" || break
    if [[ -n "${version}" ]]; then
      update_download_settings_from_version "$1"
      local dir="${CACHE_DIR}/${g_download_folder_name}/${version}"
      if [[ -s "${dir}" ]]; then
        rm -rf "${dir}"
      else
        echo "$1 (${version}) not in downloads cache"
      fi
    else
      echo "No version found for '$1'"
    fi
    shift
  done
}

#
# Prune/clear versions
#

function prune_cache() {
  set_active_node

  for folder_and_version in $(versions_paths); do
    if [[ "${folder_and_version}" != "${g_active_node}" ]]; then
      echo "${folder_and_version}"
      rm -rf "${CACHE_DIR:?}/${folder_and_version}"
    fi
  done
}

function clear_cache() {
  # Side note:tThis will leave behind empty folders, so not a clean uninstall.
  for folder_and_version in $(versions_paths); do
    echo "${folder_and_version}"
    rm -rf "${CACHE_DIR:?}/${folder_and_version}"
  done
}

#
# Output bin path for <version>
#

function display_bin_path_for_version() {
  [[ -z "$1" ]] && abort "version required"
  local version
  version="$(display_latest_resolved_version "$1")" || return 2
  [[ -n "${version}" ]] || abort "no version found for '$1'"

  update_download_settings_from_version "$1"
  local bin="${CACHE_DIR}/${g_download_folder_name}/${version}/bin/node"
  if [[ -f "${bin}" ]]; then
    echo "${bin}"
  else
    abort "'$1' (${version}) not in downloads cache"
  fi
}

#
# Execute the given <version> of node with [args ...]
#

function execute_with_version() {
  [[ -z "$1" ]] && abort "version required"
  local version
  version="$(display_latest_resolved_version "$1")" || return 2
  [[ -n "${version}" ]] || abort "no version found for '$1'"

  update_download_settings_from_version "$1"
  local bin="${CACHE_DIR}/${g_download_folder_name}/${version}/bin/node"

  if [[ -f "${bin}" ]]; then
    shift # remove version from parameters
    exec "${bin}" "$@"
  else
    abort "'$1' (${version}) not in downloads cache"
  fi
}

#
# Display resolved version.
#

function display_latest_resolved_version() {
  local version=${1#node/}
  if is_exact_numeric_version "${version}"; then
    # Just numbers, already resolved, no need to lookup first.
    version="v${version#v}"
    echo "${version}"
  else
    # Complicated recognising exact version, KISS and awlays lookup for now.
    set_show_single_remote_match
    display_remote_versions "$1"
  fi
}

#
# Display index.tab from remote url
# Reference: https://github.com/nodejs/nodejs-dist-indexer
# Index fields are: version	date	files	npm	v8	uv	zlib	openssl	modules	lts
#

display_remote_index() {
  local index_url="${g_download_mirror_url}/index.tab"
  # tail to remove header line
  do_get_index "${index_url}" | tail -n +2
  if [[ "${PIPESTATUS[0]}" -ne 0 ]]; then
    # Reminder: abort will only exit subshell, but consistent error display
    abort "failed to download version index (${index_url})"
  fi
}

#
# display_match_limit
#

function display_match_limit(){
  if [[ "$1" -gt 1 && "$1" -lt 32000 ]]; then
    echo "Listing remote... Displaying $1 matches (use --all to see all)."
  fi
}

#
# display_remote_versions <version>
#

function display_remote_versions() {
  local version="$1"
  update_download_settings_from_version "${version}"
  local match='.'
  local match_count="${g_ls_remote_max_matches}"
  if [[ -z "${version}" ]]; then
    match='.'
  elif [[ "${version}" = "lts" ]]; then
    match_count=1
    # Codename is last field, first one with a name is newest lts
    match="${TAB_CHAR}[a-zA-Z]+\$"
  elif [[ "${version}" = "latest" || "${version}" = "current" ]]; then
    match_count=1
    match='.'
  elif is_numeric_version "${version}"; then
    version="v${version#v}"
    # Avoid restriction message if exact version
    is_exact_numeric_version "${version}" && match_count=1
    # Quote any dots in version so they are literal for expression
    match="${version//\./\.}"
    # Avoid 1.2 matching 1.23
    match="^${match}[^0-9]"
  elif is_lts_codename "${version}"; then
    # Capitalise (could alternatively make grep case insensitive)
    codename="$(echo "${version:0:1}" | tr '[:lower:]' '[:upper:]')${version:1}"
    # Codename is last field
    match="${TAB_CHAR}${codename}\$"
  elif is_download_folder "${version}"; then
    match='.'
  elif is_download_version "${version}"; then
    version="${version#${g_download_folder_name}/}"
    if [[ "${version}" = "latest" || "${version}" = "current" ]]; then
      match_count=1
      match='.'
    else
      version="v${version#v}"
      match="${version//\./\.}"
      match="^${match}" # prefix
      if is_numeric_version "${version}"; then
        # Exact numeric match
        match="${match}[^0-9]"
      fi
    fi
  else
    abort "invalid version '$1'"
  fi
  display_match_limit "${match_count}"
  # Using temporary variable as curl complains if pipe closes early (e.g. head).
  local versions
  # Restrict search to platform as not always available, especially initially with slow builds coming later.
  versions="$(display_remote_index | grep -E "$(display_compatible_file_field "${version}")" |  grep -E "${match}" | cut -f -1; return "${PIPESTATUS[0]}")" || return $?
  echo "${versions}" | head -n "${match_count}"
}

#
# Parse cache sub-commands
# cache_subcommand [arguments]
#

cache_subcommand() {
  local subcommand="$1"
  # Supporting list and remove as reasonable, although undocumented in main help.
  [[ -z "${subcommand}" ]] && printf "\n  Usage: nvh cache clear|list|prune|remove\n\n" && exit
  case "${subcommand}" in
    clear) clear_cache ;;
    ls|list) versions_paths ;;
    prune) prune_cache ;;
    rm|remove) shift; remove_versions "$@" ;;
    *) abort "unrecognised cache command '$1'" ;;
  esac
}

#
# delete_with_echo <target>
#

function delete_with_echo() {
  if [[ -e "$1" ]]; then
    echo "$1"
    rm -rf "$1"
  fi
}

#
# uninstall_installed
# Uninstall the installed node and npm (leaving alone the cache),
# so undo install, and may expose possible system installed versions.
#

uninstall_installed() {
  # npm: https://docs.npmjs.com/misc/removing-npm
  #   rm -rf /usr/local/{lib/node{,/.npm,_modules},bin,share/man}/npm*
  # node: https://stackabuse.com/how-to-uninstall-node-js-from-mac-osx/
  # Doing it by hand rather than scanning cache, so still works if cache deleted first.
  # This covers tarballs for at least node 4 through 10.
  echo "Uninstalling node and npm"
  delete_with_echo "${NVH_PREFIX}/bin/node"
  delete_with_echo "${NVH_PREFIX}/bin/npm"
  delete_with_echo "${NVH_PREFIX}/bin/npx"
  delete_with_echo "${NVH_PREFIX}/include/node"
  delete_with_echo "${NVH_PREFIX}/lib/dtrace/node.d"
  delete_with_echo "${NVH_PREFIX}/lib/node_modules/npm"
  delete_with_echo "${NVH_PREFIX}/share/doc/node"
  delete_with_echo "${NVH_PREFIX}/share/man/man1/node.1"
  delete_with_echo "${NVH_PREFIX}/share/systemtap/tapset/node.stp"
  echo "(To clear cached downloads run 'nvh cache clear')"
}

#
# Show useful diagnostics
#

function show_permission_suggestions() {
  echo "Suggestions:"
  echo "- run nvh with sudo, or"
  echo "- define NVH_PREFIX to a writeable location, or"
}

function show_diagnostics() {
  echo "This information is to help you diagnose issues, and useful when reporting an issue."
  echo "Note: some output may contain passwords. Redact before sharing."

  printf "\n\n# Command Locations and Versions\n"

  printf "\n## bash\n"
  command -v bash && bash --version

  printf "\n## nvh\n"
  command -v nvh && nvh --version

  printf "\n## node\n"
  if command -v node &> /dev/null; then
    command -v node && node --version
    node -e 'if (process.versions.v8) console.log("JavaScript engine: v8"); if (process.versions.chakracore) console.log("JavaScript engine: chakracore")'

    printf "\n## npm\n"
    command -v npm && npm --version
  fi

  printf "\n## tar\n"
  if command -v tar &> /dev/null; then
    command -v tar && tar --version
  else
    warn "tar not found. Needed for extracting downloads."
  fi

  printf "\n## curl or wget\n"
  if command -v curl &> /dev/null; then
    command -v curl && curl --version
  elif command -v wget &> /dev/null; then
    command -v wget && wget --version
  else
    warn "Neither curl nor wget found. Need one of them for downloads."
  fi

  printf "\n## rsync\n"
  if command -v rsync &> /dev/null; then
    command -v rsync && rsync --version
  else
    warn "rsync not found. Needed for installs."
  fi

  printf "\n## uname\n"
  uname -a


  printf "\n\n# Settings\n"

  printf "\n\n## nvh\n"
  echo "node mirror: ${NODE_MIRROR}"
  echo "node downloads mirror: ${NODE_DOWNLOAD_MIRROR}"
  echo "install destination: ${NVH_PREFIX}"
  [[ -n "${NVH_PREFIX}" ]] && echo "PATH: ${PATH}"
  echo "ls-remote max matches: ${g_ls_remote_max_matches}"

  printf "\n\n## Proxy\n"
  # shellcheck disable=SC2154
  [[ -n "${http_proxy}" ]] && echo "http_proxy: ${http_proxy}"
  # shellcheck disable=SC2154
  [[ -n "${https_proxy}" ]] && echo "https_proxy: ${https_proxy}"
  if command -v curl &> /dev/null; then
    [[ -e "${HOME}/.curlrc" ]] && echo "have .curlrc"
    [[ -n "${HTTPS_PROXY}" ]] && echo "HTTPS_PROXY: ${HTTPS_PROXY}"
  elif command -v wget &> /dev/null; then
    [[ -e "${HOME}/.wgetrc" ]] && echo "have .wgetrc"
  fi

  printf "\n\n# Checks\n"

  printf "\nChecking nvh install destination is in PATH...\n"
  local install_bin="${NVH_PREFIX}/bin"
  local path_wth_guards=":${PATH}:"
  if [[ "${path_wth_guards}" =~ :${install_bin}/?: ]]; then
    printf "good\n"
  else
    warn "'${install_bin}' is not in PATH"
  fi
  if command -v node &> /dev/null; then
    printf "\nChecking nvh install destination priority in PATH...\n"
    local node_dir="$(dirname "$(command -v node)")"

    local index=0
    local path_entry
    local path_entries
    local install_bin_index=0
    local node_index=999
    IFS=':' read -ra path_entries <<< "${PATH}"
    for path_entry in "${path_entries[@]}"; do
      (( index++ ))
      [[ "${path_entry}" =~ ^${node_dir}/?$ ]] && node_index="${index}"
      [[ "${path_entry}" =~ ^${install_bin}/?$ ]] && install_bin_index="${index}"
    done
    if [[ "${node_index}" -lt "${install_bin_index}" ]]; then
      warn "There is a version of node installed which will be found in PATH before the nvh installed version."
    else
      printf "good\n"
    fi
  fi

  printf "\nChecking permissions for cache folder...\n"
  # Most likely problem is ownership rather than than permissions as such.
  local cache_root="${NVH_PREFIX}/nvh"
  if [[ -e "${NVH_PREFIX}" && ! -w "${NVH_PREFIX}" && ! -e "${cache_root}" ]]; then
    warn "You do not have write permission to create: ${cache_root}"
    show_permission_suggestions
    echo "- make a folder you own:"
    echo "      sudo mkdir -p \"${cache_root}\""
    echo "      sudo chown $(whoami) \"${cache_root}\""
  elif [[ -e "${cache_root}" && ! -w "${cache_root}" ]]; then
    warn "You do not have write permission to: ${cache_root}"
    show_permission_suggestions
    echo "- change folder ownership to yourself:"
    echo "      sudo chown -R $(whoami) \"${cache_root}\""
  elif [[ ! -e "${cache_root}" ]]; then
    echo "Cache folder does not exist: ${cache_root}"
    echo "This is normal if you have not done an install yet, as cache is only created when needed."
  elif [[ -e "${CACHE_DIR}" && ! -w "${CACHE_DIR}" ]]; then
    warn "You do not have write permission to: ${CACHE_DIR}"
    show_permission_suggestions
    echo "- change folder ownership to yourself:"
    echo "      sudo chown -R $(whoami) \"${CACHE_DIR}\""
  else
    echo "good"
  fi

  if [[ -e "${NVH_PREFIX}" ]]; then
    # Most likely problem is ownership rather than than permissions as such.
    printf "\nChecking permissions for install folders...\n"
    local install_writeable="true"
    for subdir in bin lib include share; do
      if [[ -e "${NVH_PREFIX}/${subdir}" && ! -w "${NVH_PREFIX}/${subdir}" ]]; then
        install_writeable="false"
        warn "You do not have write permission to: ${NVH_PREFIX}/${subdir}"
        break
      fi
    done
    if [[ "${install_writeable}" = "true" ]]; then
      echo "good"
    else
      show_permission_suggestions
      echo "- change folder ownerships to yourself:"
      echo "      (cd \"${NVH_PREFIX}\" && sudo chown -R $(whoami) bin lib include share)"
    fi
  fi

  printf "\nChecking mirror is reachable...\n"
  if is_ok "${NODE_MIRROR}/"; then
    printf "good\n"
  else
    warn "mirror not reachable"
    printf "Showing failing command and output\n"
    if command -v curl &> /dev/null; then
      ( set -x; do_get --head "${NODE_MIRROR}/" )
    else
      ( set -x; do_get --spider "${NODE_MIRROR}/" )
    printf "\n"
   fi
  fi
}

#######################################################################################################

#
# Handle arguments.
#

# First pass. Process the options so they can come before or after commands,
# particularly for `nvh lsr --all` and `nvh install --preserve foo`
# which feel pretty natural.

unprocessed_args=()

while [[ $# -ne 0 ]]; do
  case "$1" in
    --all) set_show_all_remote_matches ;;
    -h|--help|help) display_help; exit ;;
    --insecure) set_insecure ;;
    -p|--preserve) set_preserve_npm ;;
    -V|--version) display_nvh_version; exit ;;
    -*) abort "unrecognised option '$1'"; exit 1 ;;
    run) unprocessed_args=("$@"); break ;;
    *) unprocessed_args+=( "$1" ) ;;
  esac
  shift
done

set -- "${unprocessed_args[@]}"

# Second pass. Commands.

if [[ $# -eq 0 ]]; then
  [[ -z "$(versions_paths)" ]] && err_no_installed_print_help
  display_cache_versions
else
  case "$1" in
    doctor) show_diagnostics ;;
    i|install) shift; install "$1" ;;
    ls|list) versions_paths ;;
    lsr|ls-remote|list-remote) shift; display_remote_versions "$1" ;;
    cache) shift; cache_subcommand "$@" ;;
    prune) prune_cache ;;
    rm|remove) shift; remove_versions "$@" ;;
    run) shift; execute_with_version "$@" ;;
    uninstall) uninstall_installed ;;
    which) shift; display_bin_path_for_version "$1" ;;
    *) abort "unrecognised command '$1' (perhaps you want 'nvh install $1'?)" ;;
  esac
fi

