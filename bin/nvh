#!/usr/bin/env bash

#
# Setup.
#

readonly VERSION="1.0.0-0"
readonly NVH_PREFIX=${NVH_PREFIX-/usr/local}
readonly BASE_VERSIONS_DIR=$NVH_PREFIX/nvh/versions

NODE_MIRROR=${NVH_NODE_MIRROR=https://nodejs.org/dist}
NODE_MIRROR=${NODE_MIRROR%/}
readonly NODE_MIRROR

NODE_DOWNLOAD_MIRROR=${NVH_NODE_DOWNLOAD_MIRROR=https://nodejs.org/download}
NODE_DOWNLOAD_MIRROR=${NODE_DOWNLOAD_MIRROR%/}
readonly NODE_DOWNLOAD_MIRROR

# ToDo: remove or use new names
BINS=("node")
VERSIONS_DIR=($BASE_VERSIONS_DIR/node)

# ToDo: change case, these are global not constant
# ToDo: handle boolean differently
DEFAULT=0
QUIET=true
ARCH=
PRESERVE_NPM=false

g_ls_remote_max_matches=${NVH_MAX_REMOTE_MATCHES=20}

g_custom_mirror_url=${NODE_MIRROR}
g_custom_folder_name="node"

#
# update_settings_from_version <version>
# e.g. <nightly/latest> means using download mirror and custom_name is nightly
#

function update_settings_from_version() {
  if is_download_folder "$1" ; then
    g_custom_folder_name="${1}"
    g_custom_mirror_url="${NODE_DOWNLOAD_MIRROR}/${g_custom_folder_name}"
  elif is_download_folder "$1" || is_download_version "$1"; then
    [[ "${1}" =~ ^([^/]+)/(.*) ]]
    local remote_folder="${BASH_REMATCH[1]}"
    g_custom_folder_name="${remote_folder}"
    g_custom_mirror_url="${NODE_DOWNLOAD_MIRROR}/${g_custom_folder_name}"
  fi
}

#
# log <action> <msg>
#

log() {
  printf "  \033[36m%10s\033[0m : \e[2m%s\e[22m\033[0m\n" $1 $2
}

#
# abort <messages...>
# Exit with the given messge
#

abort() {
  printf "\n  \033[31mError: $@\033[0m\n\n" && exit 1
}

#
# Version test patterns
#

function is_lts_codename() {
  # https://github.com/nodejs/Release/blob/master/CODENAMES.md
  # e.g. argon, Boron
  [[ "$1" =~ ^([Aa]rgon|[Bb]oron)|[Cc]arbon|[Dd]ubnium|[Ee]rbium|[Ff]ermium|[Gg]allium|[Hh]ydrogen|[Ii]ron$ ]]
}

function is_release_branch() {
  # e.g. 8.x, v9.x
  [[ "$1" =~ ^[v]{0,1}[0-9]+\.x$ ]]
}

function is_download_folder() {
  # exact match for name
  [[ "$1" =~ ^(chakracore-nightly|chakracore-rc|chakracore-release|next-nightly|nightly|rc|release|test|v8-canary)$ ]]
}

function is_download_version() {
  # e.g. nightly/latest
  [[ "$1" =~ ^[^/]+/ ]]
}

function is_semver() {
  # e.g. 6, v7.1, 8.11.3
  [[ "$1" =~ ^[v]{0,1}[0-9]+(\.[0-9]+){0,2}$ ]]
}

#
# Ensure we have curl or wget support.
#

# ToDo: move globals to top of file
CURL_PARAMS=( "-L"
              "-#")

WGET_PARAMS=( "--no-check-certificate"
              "-q"
              "-O-")

# ToDo: move code to end of file
if [ -n "$NVH_NODE_MIRROR_USER" ];then
  if [ -z "$NVH_NODE_MIRROR_PASSWORD" ]; then
    abort "Must specify NVH_NODE_MIRROR_PASSWORD when supplying NVH_NODE_MIRROR_USER"
  fi
  CURL_PARAMS+=("-u $NVH_NODE_MIRROR_USER:$NVH_NODE_MIRROR_PASSWORD")
  WGET_PARAMS+=("--http-password=$NVH_NODE_MIRROR_PASSWORD"
                "--http-user=$NVH_NODE_MIRROR_USER")
elif [ -n "$NVH_NODE_MIRROR_PASSWORD" ]; then
  abort "Must specify NVH_NODE_MIRROR_USER when supplying NVH_NODE_MIRROR_PASSWORD"
fi

GET=

# wget support
command -v wget > /dev/null && GET="wget ${WGET_PARAMS[@]}"

command -v curl > /dev/null && GET="curl ${CURL_PARAMS[@]}" && QUIET=false

test -z "$GET" && abort "curl or wget required"

# ToDo: move code to end of file, or move into routine and call when needed
for dir in ${VERSIONS_DIR[@]}; do
  test -d $dir || mkdir -p $dir
done

#
# set_arch <arch> to override $(uname -a)
#

set_arch() {
  if test ! -z $1; then
    echo "Warning: --arch deprecated"
    ARCH=$1
  else
    abort "missing -a|--arch value"
  fi
}

#
# Functions used when showing versions installed
#

enter_fullscreen() {
  tput smcup
  stty -echo
}

leave_fullscreen() {
  tput rmcup
  stty echo
}

handle_sigint() {
  leave_fullscreen
  S="$?"
  kill 0
  exit $S
}

handle_sigtstp() {
  leave_fullscreen
  kill -s SIGSTOP $$
}

#
# Output usage information.
#

display_help() {
  cat <<-EOF

  Usage: nvh [options] [COMMAND] [args]

  Commands:

    nvh                             Display downloaded node versions and install selection
    nvh <version>                   Install node <version> (downloading if necessary)
    nvh run <version> [args ...]    Execute downloaded node <version> with [args ...]
    nvh which <version>             Output path for downloaded node <version>
    nvh rm <version ...>            Remove the given downloaded (explicit) version(s)
    nvh prune                       Remove all downloaded versions except the active version
    nvh ls-remote                   Output all the versions of node available for download
    nvh ls-remote <version>         Output latest matching version available for download
    nvh ls                          Output downloaded versions
    nvh doctor                      Output diagnostics to help solve issues

  Versions:

    A version can be explicit like "8.11.3". A leading v is allowed like "v6.0.0".

    You can also use named versions and incomplete versions,
    which use a remote lookup to find the explicit version.

    lts       Latest LTS node release
    latest    Latest node release
    8         Latest 8.x.y release
    6.1       Latest 6.1.x release
    argon     Latest release in Argon release stream (also boron, carbon...)

  Options:

    -V, --version       Output version of n
    -h, --help          Display help information
    -q, --quiet         Disable curl output (if available)
    -a, --arch          Override system architecture
    -p, --preserve      Preserve npm and npx during install of node

  Aliases:

    ls-remote: lsr, list-remote
    ls: list
    rm: remove

  Examples:

    nvh latest      Install the latest node release
    nvh -p lts      Install latest LTS version, preserving installed npm and npx
    nvh rm 6.11.1   Remove downloaded 6.11.1
    nvh ls lts      Output latest lts version

EOF
}

err_no_installed_print_help() {
  printf "\n  \033[31mError: no downloaded versions\033[0m\n"
  display_help
  exit 1
}

#
# Hide cursor.
#

hide_cursor() {
  printf "\e[?25l"
}

#
# Show cursor.
#

show_cursor() {
  printf "\e[?25h"
}

#
# Output version after selected.
#

next_version_installed() {
  list_versions_installed | grep $selected -A 1 | tail -n 1
}

#
# Output version before selected.
#

prev_version_installed() {
  list_versions_installed | grep $selected -B 1 | head -n 1
}

#
# Output n version.
#

display_nvh_version() {
  echo $VERSION && exit 0
}

#
# Check for installed version, and populate $active
#

check_current_version() {
  command -v node &> /dev/null
  if test $? -eq 0; then
    local current=$(node --version)
    current=${current#v}
    for bin in ${BINS[@]}; do
      if diff &> /dev/null \
        $BASE_VERSIONS_DIR/$bin/$current/bin/node \
        $(which node) ; then
        active=$bin/$current
      fi
    done
  fi
}

#
# Display sorted versions directories paths.
#

versions_paths() {
  find $BASE_VERSIONS_DIR -maxdepth 2 -type d \
    | sed 's|'$BASE_VERSIONS_DIR'/||g' \
    | egrep "/[0-9]+\.[0-9]+\.[0-9]+$" \
    | sed 's|/|.|' \
    | sort -k 1,1 -k 2,2n -k 3,3n -k 4,4n -t . \
    | sed 's|\.|/|'
}

#
# Display installed versions with <selected>
#

display_versions_with_selected() {
  selected=$1
  echo
  for version in $(versions_paths); do
    if test "$version" = "$selected"; then
      printf "  \033[36mÎ¿\033[0m $version\033[0m\n"
    else
      printf "    \e[2m$version\e[22m\n"
    fi
  done
  echo
}

#
# List installed versions.
#

list_versions_installed() {
  for version in $(versions_paths); do
    echo $version
  done
}

#
# Display current node --version and others installed.
#

display_downloaded_versions() {
  enter_fullscreen
  check_current_version
  clear
  display_versions_with_selected $active

  trap handle_sigint INT
  trap handle_sigtstp SIGTSTP

  ESCAPE_SEQ=$'\033'
  UP=$'A'
  DOWN=$'B'

  while true; do
    read -rsn 1 key
    case "$key" in
      $ESCAPE_SEQ)
        # Handle ESC sequences followed by other characters, i.e. arrow keys
        read -rsn 1 -t 1 tmp
        if  [[ "$tmp" == "[" ]]; then
          read -rsn 1 -t 1 arrow
          case "$arrow" in
            $UP)
              clear
              display_versions_with_selected $(prev_version_installed)
              ;;
            $DOWN)
              clear
              display_versions_with_selected $(next_version_installed)
              ;;
          esac
        fi
        ;;
      "k")
        clear
        display_versions_with_selected $(prev_version_installed)
        ;;
      "j")
        clear
        display_versions_with_selected $(next_version_installed)
        ;;
      "q")
        clear
        leave_fullscreen
        exit
        ;;
      "")
        # enter key returns empty string
        leave_fullscreen
        activate $selected
        exit
        ;;
    esac
  done
}

#
# Move up a line and erase.
#

erase_line() {
  printf "\033[1A\033[2K"
}

#
# Check if the HEAD response of <url> is 200.
#
is_ok() {
  if command -v curl > /dev/null; then
    $GET -Is $1 | head -n 1 | grep 200 > /dev/null
  else
    $GET -S --spider 2>&1 $1 | head -n 1 | grep 200 > /dev/null
  fi
}

#
# Check if the OSS(Object Storage Service) mirror is ok.
#

is_oss_ok() {
  if command -v curl > /dev/null; then
    if $GET -Is $1 | head -n 1 | grep 302 > /dev/null; then
      is_oss_ok $GET -Is $1 | grep Location | awk -F ': ' '{print $2}'
    else
      $GET -Is $1 | head -n 1 | grep 200 > /dev/null
    fi
  else
    if $GET -S --spider 2>&1 $1 | head -n 1 | grep 302 > /dev/null; then
      is_oss_ok $GET -S --spider 2>&1 $1 | grep Location | awk -F ': ' '{print $2}'
    else
      $GET -S --spider 2>&1 $1 | head -n 1 | grep 200 > /dev/null
    fi
  fi
}

#
# Determine tarball url for <version>
#

tarball_url() {
  local version=$1
  local uname="$(uname -a)"
  local arch=x86
  local os=

  # from nave(1)
  case "$uname" in
    Linux*) os=linux ;;
    Darwin*) os=darwin ;;
    SunOS*) os=sunos ;;
  esac

  case "$uname" in
    *x86_64*) arch=x64 ;;
    *armv6l*) arch=armv6l ;;
    *armv7l*) arch=armv7l ;;
    *arm64*) arch=arm64 ;;
    *aarch64*) arch=arm64 ;;
  esac

  if [ ${arch} = "armv6l" ]; then
    local semver=${version//./ }
    local major=$(echo $semver | grep -o -E '[0-9]+' | head -1 | sed -e 's/^0\+//')
    local minor=$(echo $semver | awk '{print $2}' | grep -o -E '[0-9]+' | head -1 | sed -e 's/^0\+//')
    [[ $major -eq "" && $minor -lt 12 ]] && arch=arm-pi
  fi

  [ ! -z $ARCH ] && arch=$ARCH

  echo "${g_custom_mirror_url}/v${version}/node-v${version}-${os}-${arch}.tar.gz"
}

#
# Disable PaX mprotect for <binary>
#

disable_pax_mprotect() {
  test -z $1 && abort "binary required"
  local binary=$1

  # try to disable mprotect via XATTR_PAX header
  local PAXCTL=$(PATH="/sbin:/usr/sbin:$PATH" which paxctl-ng 2>&1)
  local PAXCTL_ERROR=1
  if [ -x "$PAXCTL" ]; then
    $PAXCTL -l && $PAXCTL -m "$binary" >/dev/null 2>&1
    PAXCTL_ERROR="$?"
  fi

  # try to disable mprotect via PT_PAX header
  if [ $PAXCTL_ERROR != 0 ]; then
    PAXCTL=$(PATH="/sbin:/usr/sbin:$PATH" which paxctl 2>&1)
    if [ -x "$PAXCTL" ]; then
      $PAXCTL -Cm "$binary" >/dev/null 2>&1
    fi
  fi
}

#
# activate <path_from_prefix>
# e.g. activate node/8.11.3, activate nightly/11.0.0-nightly201807118174d0c8ca
#

activate() {
  local path_from_prefix=$1
  local dir=$BASE_VERSIONS_DIR/${path_from_prefix}
  # Remove old npm to avoid potential issues with simple overwrite.
  if [[ $PRESERVE_NPM == false && -d "$dir/lib/node_modules/npm" ]]; then
    if test -d "$NVH_PREFIX/lib/node_modules/npm"; then
      rm -rf "$NVH_PREFIX/lib/node_modules/npm"
    fi
  fi
  # Copy (lib before bin to avoid error messages on Darwin when cp over dangling link)
  for subdir in lib bin include share; do
    if [[ $PRESERVE_NPM == true ]]; then
      mkdir -p "$NVH_PREFIX/$subdir"
      (cd "$dir/$subdir"; tar -cf - --exclude npm --exclude npx .) | (cd "$NVH_PREFIX/$subdir"; tar -xf -)
    elif test -L "$NVH_PREFIX/$subdir"; then
      find "$dir/$subdir" -mindepth 1 -maxdepth 1 -exec cp -fR "{}" "$NVH_PREFIX/$subdir" \;
    else
      cp -fR "$dir/$subdir" $NVH_PREFIX
    fi
  done
  disable_pax_mprotect "$NVH_PREFIX/bin/node"
  log installed $(node --version)
}

#
# Install <version>
#

install() {
  local resolved_version=$(display_latest_resolved_version "$1")
  test $resolved_version || abort "did not find remote version for $1"
  update_settings_from_version "$1"

  local dir="${BASE_VERSIONS_DIR[$DEFAULT]}/${g_custom_folder_name}/${resolved_version}"

  if test -d $dir; then
    if [[ ! -e $dir/n.lock ]] ; then
      activate "${g_custom_folder_name}/${resolved_version}"
      exit
    fi
  fi

  echo
  log downloading ${BINS[$DEFAULT]}-v$resolved_version

  local url=$(tarball_url $resolved_version)
  is_ok $url || is_oss_ok $url || abort "download failed for $resolved_version"

  log mkdir $dir
  mkdir -p $dir
  if [ $? -ne 0 ] ; then
    abort "sudo required"
  else
    touch $dir/n.lock
  fi

  cd $dir

  log fetch $url
  $GET $url | tar -zx --strip-components=1
  [ $QUIET == false ] && erase_line
  rm -f $dir/n.lock

  disable_pax_mprotect bin/node

  activate "${g_custom_folder_name}/${resolved_version}"
  echo
}

#
# Set curl to quiet (silent) mode.
#

set_quiet() {
  command -v curl > /dev/null && GET="$GET -s" && QUIET=true
}

#
# set number of remote matches
#

function set_show_all_remote_matches() {
  g_ls_remote_max_matches=32000
}

function set_show_single_remote_match() {
  g_ls_remote_max_matches=1
}

#
# Remove <version ...>
#

remove_versions() {
  test -z $1 && abort "version(s) required"
  check_current_version
  while test $# -ne 0; do
    local version=${1#v}
    # [ "${BINS[$DEFAULT]}/$version" == "$active" ] && abort "cannot remove currently active version ($active)"
    rm -rf ${VERSIONS_DIR[$DEFAULT]}/$version
    shift
  done
}

#
# Prune non-active versions
#

prune_versions() {
  check_current_version
  for version in $(versions_paths); do
    if [ $version != $active ]
    then
      echo $version
      rm -rf ${BASE_VERSIONS_DIR[$DEFAULT]}/$version
      shift
    fi
  done
}

#
# Output bin path for <version>
#

display_bin_path_for_version() {
  test -z $1 && abort "version required"
  local version=$(display_latest_resolved_version $1)
  test $version || abort "invalid version ${1}"

  local bin=${VERSIONS_DIR[$DEFAULT]}/$version/bin/node
  if test -f $bin; then
    printf "$bin\n"
  else
    abort "$version is not installed"
  fi
}

#
# Execute the given <version> of node with [args ...]
#

execute_with_version() {
  test -z $1 && abort "version required"
  local version=$(display_latest_resolved_version $1)
  test $version || abort "invalid version ${1}"

  local bin=${VERSIONS_DIR[$DEFAULT]}/$version/bin/node

  shift # remove version

  if test -f $bin; then
    exec $bin "$@"
  else
    abort "$version is not installed"
  fi
}

#
# Access remote, filter folders, sort by numeric version
# display_remote_version_folders <remote> <version_prefix?> <last_lines? = g_ls_remote_max_matches>
#

display_remote_version_folders() {
  # Ensure trailing slash
  local remote_url=${1%/}/

  # Version could be empty, 1, v1.2, 1.2.3, 10.0.0-nightly201711117b3446e7bb
  local version_prefix=$2
  [[ -z "$version_prefix" ]] && version_prefix='[0-9]+'
  version_prefix="v${version_prefix#v}" # Ensure leading v
  # Make semver terminated, so 1.1 does not match 1.11 et al
  is_semver "${version_prefix}" && version_prefix="${version_prefix}([.-].+){0,1}$"
  # Quote the dots so they are literal and not special in expression
  version_prefix=${version_prefix//\./\.}

  local last_lines="$3"
  [[ -z "${last_lines}" ]] && last_lines=${g_ls_remote_max_matches}

  # dist:     v8.11.3/
  # nightly:  v10.0.0-nightly201711117b3446e7bb/
  # rc:       v10.1.0-rc.0/
  # test:     v10.0.0-test20180410edd9cc466a/

  # <a href="v9.3.1-nightly2018010930273d400c/">v9.3.1-nightly2018010930273d400c/</a>
  # --> "v9.3.1-nightly2018010930273d400c/"
  # --> v9.3.1-nightly2018010930273d400c
  # search for version_prefix
  # --> 9.3.1.-nightly2018010930273d400c
  # sort using number . number . number . text . number
  # --> v9.3.1-nightly2018010930273d400c
  $GET 2> /dev/null "${remote_url}" \
    | egrep "</a>" \
    | egrep -o 'href="[^"]+/"' \
    | egrep -o 'v[0-9]+\.[0-9]+\.[0-9]+[^/]*' \
    | egrep "^${version_prefix}" \
    | sed 's|v\(.*\)|\1|; s|-|.-|' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -k 4,4 -k 5,5n -t . \
    | sed 's|\.-|-|; s|.*|v&|' \
    | tail -n ${last_lines}
}

#
# Access remote, filter files, sort by numeric version.
# display_remote_version_folders <remote> <last_lines? = g_ls_remote_max_matches>
#

display_remote_files() {
  local remote_url=${1%/}/

  $GET 2> /dev/null "${remote_url}" \
    | egrep "</a>" \
    | egrep -o 'v[0-9]+\.[0-9]+\.[0-9]+' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | tail -n1
}

#
# Display codename version.
#

display_latest_codename_version() {
  local codename=$1
  local folder_name=$($GET 2> /dev/null "${NODE_MIRROR}/" \
    | egrep "</a>" \
    | egrep -o "latest-$codename" \
    | sort \
    | tail -n1)
  test $folder_name || return 0

  $GET 2> /dev/null "${NODE_MIRROR}/$folder_name/" \
    | egrep "</a>" \
    | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | tail -n1
}

#
# Display resolved version.
#

display_latest_resolved_version() {
  local version=$1
  if [[ "${version}" =~ ^[v]{0,1}[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    # Just numbers, already resolved, no need to lookup first. Just try download.
    version=${version#v}
    echo $version
  else
    set_show_single_remote_match
    display_remote_versions $1
  fi
}

#
# Display the latest lts release version.
#

display_latest_lts_version() {
  # Find the alphabetical last codename
  local folder_name=$($GET 2> /dev/null "${NODE_MIRROR}/" \
    | egrep "</a>" \
    | egrep -o 'latest-[a-z]{2,}' \
    | sort \
    | tail -n1)

  display_remote_files "${NODE_MIRROR}/${folder_name}/"
}

#
# display_match_limit
#

display_match_limit(){
  if [[ "${g_ls_remote_max_matches}" -gt 1 && "${g_ls_remote_max_matches}" < 32000 ]]; then
    echo "Listing remote... Displaying last ${g_ls_remote_max_matches} matches (use --all to see all)."
  fi
}


#
# display_remote_versions <version>
#

display_remote_versions() {
  local version="$1"
  if [[ -z "${version}" ]]; then
    display_match_limit
    display_remote_version_folders "${NODE_MIRROR}/"
  elif [[ "${version}" = "lts" ]]; then
    display_latest_lts_version
  elif [[ "${version}" = "latest" ]]; then
    display_remote_version_folders "${NODE_MIRROR}/" "" 1
  elif is_download_folder "${version}"; then
    display_match_limit
    display_remote_version_folders "${NODE_DOWNLOAD_MIRROR}/${version}/"
  elif is_download_version "${version}"; then
    [[ "${version}" =~ ^([^/]+)/(.*) ]]
    local remote_folder="${BASH_REMATCH[1]}"
    version="${BASH_REMATCH[2]}"
    if [[ "${version}" = "latest" ]]; then
      display_remote_version_folders "${NODE_DOWNLOAD_MIRROR}/${remote_folder}/" "" 1
    else
      display_match_limit
      display_remote_version_folders "${NODE_DOWNLOAD_MIRROR}/${remote_folder}/" "${version}"
    fi
  elif is_lts_codename "${version}"; then
    # Only one version on nodejs/dist
    display_remote_files "${NODE_MIRROR}/latest-${version}/"
  elif is_release_branch "${version}"; then
    # Only one version on nodejs/dist
    version="v${version#v}"
    display_remote_files "${NODE_MIRROR}/latest-${version}/"
  else
    if [[ "${version}" =~ ^[v]{0,1}[0-9]+(\.[0-9]+){0,1}$ ]]; then
      # 8, v8.1: partial match so warn.
      display_match_limit
    fi
    display_remote_version_folders "${NODE_MIRROR}/" "${version}"
  fi

}

#
# Show useful diagnostics
#

show_diagnostics() {
  echo "# Commands"
  echo "## bash"
  bash --version
  echo "## nvh"
  command -v nvh && nvh --version
  command -v node &> /dev/null
  if test $? -eq 0; then
    echo "## node"
    command -v node && node --version && echo "node engine: $(node -e 'console.log(process.jsEngine)')"
    echo "## npm"
    command -v npm && npm --version
  else
    echo "## node not found"
  fi

  echo
  echo "# nvh Setup"
  echo "node mirror: ${NODE_MIRROR}"
  echo "node downloads mirror: ${NODE_DOWNLOAD_MIRROR}"
  echo "install location: $NVH_PREFIX"
  test -z "NVH_PREFIX" ||echo "PATH: $PATH"
}

#######################################################################################################

#
# Handle arguments.
#

if test $# -eq 0; then
  test -z "$(versions_paths)" && err_no_installed_print_help
  display_downloaded_versions
else
  while test $# -ne 0; do
    case $1 in
      -V|--version) display_nvh_version ;;
      -h|--help|help) display_help; exit ;;
      -q|--quiet) set_quiet ;;
      -p|--preserve) PRESERVE_NPM=true ;;
      --all) set_show_all_remote_matches ;;
      --arch) shift; set_arch $1;; # set arch and continue. Deprecated.
      which) shift; display_bin_path_for_version $1; exit ;;
      run) shift; execute_with_version $@; exit ;;
      rm|remove) shift; remove_versions $@; exit ;;
      prune) prune_versions; exit ;;
      lsr|ls-remote|list-remote)
        shift
        [[ "$1" = "--all" ]] && set_show_all_remote_matches && shift
        display_remote_versions $1
        exit
        ;;
      ls|list) versions_paths; exit ;;
      doctor) show_diagnostics; exit ;;
      *) install $1; exit ;;
    esac
    shift
  done
fi
